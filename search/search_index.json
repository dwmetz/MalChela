{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MalChela","text":"<p>This site hosts the MalChela user guide, tool documentation, and integration instructions.</p> <ul> <li>Use the tabs above to navigate. On mobile or iPad, tap the \u2630 icon (top-left) to open the navigation menu.</li> <li>The full PDF version of the user guide is available here.</li> </ul> <p></p>"},{"location":"about/","title":"About","text":"<p>\ud83e\udd80 MalChela is a modular toolkit for digital forensic analysts, malware researchers, and threat intelligence teams. It provides both a Command Line Interface (CLI) and a Graphical User Interface (GUI) for running analysis tools in a unified environment.</p> <p>mal \u2014 malware</p> <p>chela \u2014 \u201ccrab hand\u201d</p> <p>A chela on a crab is the scientific term for a claw or pincer. It\u2019s a specialized appendage, typically found on the first pair of legs, used for grasping, defense, and manipulating things; just like these programs.</p> <p></p> <p>Figure 1: MalChela GUI</p> <p></p> <p>Figure 2: MalChela CLI</p>"},{"location":"cases/","title":"4.16 Case Management","text":"<p>The Cases feature in MalChela v3.0 introduces a structured way to manage analysis sessions, organize tool results, and preserve analyst notes for long-term reference. Each case acts as a container for a specific file or folder input, and captures relevant metadata, tool output, and custom annotations.</p> <p></p> <p>Figure 5: Case Management</p>"},{"location":"cases/#creating-a-case","title":"Creating a Case","text":"<p>A case can be created by providing:</p> <ul> <li>A file (e.g. suspicious binary)</li> <li>A folder (directory of unknown files e.g. Tshark export http objects)</li> </ul> <p></p> <p>Figure 6: New Case</p> <p>After choosing the input, assign a descriptive case name. The GUI will automatically create a new folder under:</p> <pre><code>saved_output/cases/&lt;case_name&gt;/\n</code></pre>"},{"location":"cases/#case-contents","title":"Case Contents","text":"<p>Each case folder includes:</p> <ul> <li><code>case.yaml</code>: combines metadata, case tracking, and user notes in a single structured file</li> <li><code>fileminer/</code>, <code>mstrings/</code>, <code>malhash/</code>, etc.: tool-specific output directories</li> <li><code>tracking/</code>: flags for completed tool runs</li> </ul>"},{"location":"cases/#notes-tagging","title":"Notes &amp; Tagging","text":"<p>The scratchpad allows users to record notes, label items with tags, and track investigative context across sessions.</p> <ul> <li>Notes can include plain text, YAML fragments, or markdown.</li> </ul>"},{"location":"cases/#tagging","title":"Tagging:","text":"<ul> <li>Any word prefixed with <code>#</code> (e.g., <code>#malware</code>, <code>#tshark</code>) becomes a tag.</li> <li>These tags will appear in the Workspace panel under the current case.</li> <li>Tags help organize and filter case context.</li> </ul>"},{"location":"cases/#search","title":"Search:","text":"<ul> <li>From the Case Modal, you can search across:</li> <li>All saved tool outputs</li> <li>Notes contents</li> <li>Tags (by prefixing with <code>#</code>)</li> </ul> <p>Figure 7: Searching Cases</p>"},{"location":"cases/#archiving-restoring-cases","title":"Archiving &amp; Restoring Cases","text":"<p>Cases can be archived into a <code>.zip</code> file using the GUI's Archive Case feature. This creates a portable snapshot that includes all metadata, notes, and tool outputs.</p> <p>To restore a case:</p> <ul> <li>Open the GUI</li> <li>Use Restore Case</li> <li>Select a <code>.zip</code> archive containing a valid <code>case.json</code></li> </ul> <p>The case will be rehydrated into the <code>saved_output/cases/</code> directory and appear in the workspace.</p>"},{"location":"cases/#case-aware-tool-tracking","title":"Case-Aware Tool Tracking","text":"<p>Tools launched from the workspace automatically write output into the active case's subfolder and register a tracking file to avoid redundant execution.</p> <p></p> <p>Figure 8: Example Case</p>"},{"location":"cases/#summary","title":"Summary","text":"<p>Cases enable consistent, organized forensic workflows across sessions and machines. Whether you're triaging suspicious files, running multi-tool pipelines, or collaborating across systems, the Cases feature ensures nothing is lost.</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#prerequisites","title":"Prerequisites","text":"<pre><code>\u2022   Rust and Cargo\n\u2022   Git\n\u2022   Unix-like environment (Linux, macOS, or Windows with WSL)\n</code></pre>"},{"location":"install/#system-dependencies-recommended","title":"System Dependencies (Recommended)","text":"<p>To ensure all tools build and run correctly, install the following packages (especially for Linux/REMnux):</p> <pre><code>sudo apt install openssl libssl-dev clang yara libyara-dev pkg-config build-essential libglib2.0-dev libgtk-3-dev ssdeep\n</code></pre> <p>These are required for: - YARA and YARA-X support - Building Rust crates that link to native libraries (e.g., GUI dependencies) - TShark integration (via GTK/glib) - <code>ssdeep</code> is used for fuzzy hashing in tools like <code>fileanalyzer</code>. If not installed, fuzzy hash results may be unavailable.</p>"},{"location":"install/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/dwmetz/MalChela.git\n\ncd MalChela\n</code></pre>"},{"location":"install/#build-tools","title":"Build Tools","text":"<pre><code>cargo build                 # Build all tools\ncargo build -p fileanalyzer # Build individual tool\n</code></pre>"},{"location":"install/#windows-notes","title":"Windows Notes","text":"<pre><code>\u2022   Best experience via WSL2\n\u2022   GUI is not supported natively on Windows\n</code></pre>"},{"location":"remnux/","title":"REMnux Mode","text":"<p>MalChela includes built-in support for running in REMnux Mode, a configuration designed specifically for seamless operation within the REMnux malware analysis distribution.</p>"},{"location":"remnux/#how-remnux-mode-works","title":"How REMnux Mode Works","text":"<p>REMnux Mode is a configuration profile that aligns MalChela\u2019s behavior with the REMnux malware analysis distribution. It adjusts paths, tool definitions, and GUI presentation to match the REMnux environment.</p> <p>This mode is manually enabled by selecting \u201cLoad REMnux\u201d from the tools.yaml Configuration Panel in the GUI. Once selected, a REMnux-specific <code>tools.yaml</code> file is loaded and remains active until you replace it with another configuration.</p> <p></p> <p>Figure 32: Enabling REMnux mode</p> <p>Note: Whenever you change the tools.yaml, you need to restart the GUI for it to take effect.</p> <p></p> <p>Figure 33: MalChela in REMnux Mode </p>"},{"location":"remnux/#preconfigured-tools-in-remnux-mode","title":"Preconfigured Tools in REMnux Mode","text":"<p>The following tools will appear in the GUI when REMnux Mode is enabled. Each is preconfigured with known-good paths for the REMnux environment:</p>"},{"location":"remnux/#file-analysis","title":"File Analysis","text":"Tool Description Command binwalk Scan binary files for embedded files <code>binwalk</code> capa Detects capabilities in binaries via rules <code>capa</code> FLOSS Extract obfuscated strings from binaries <code>floss</code> radare2 Scan binary files <code>/usr/bin/r2 -i</code>"},{"location":"remnux/#memory-forensics","title":"Memory Forensics","text":"Tool Description Command Volatility 3 Memory analysis using Volatility 3 <code>vol3</code>"},{"location":"remnux/#metadata-analysis","title":"Metadata Analysis","text":"Tool Description Command exiftool Extract metadata from files <code>exiftool</code>"},{"location":"remnux/#network-forensics","title":"Network Forensics","text":"Tool Description Command TShark Analyze network traffic <code>tshark</code>"},{"location":"remnux/#office-document-analysis","title":"Office Document Analysis","text":"Tool Description Command mraptor Detect auto-executing macros in Office docs <code>mraptor</code> oledump Dump streams from OLE files <code>oledump.py</code> oleid Analyze OLE files for suspicious indicators <code>oleid</code> olevba Extract VBA macros from OLE files <code>olevba</code> rtfobj Extract embedded objects from RTF files <code>rtfobj</code> zipdump Parses and analyzes suspicious PDF structures <code>zipdump.py</code>"},{"location":"remnux/#pdf-analysis","title":"PDF Analysis","text":"Tool Description Command pdf-parser Parse structure and objects of a PDF file <code>python3 /usr/local/bin/pdf-parser.py</code>"},{"location":"remnux/#utilities","title":"Utilities","text":"Tool Description Command clamscan Antivirus scan using ClamAV <code>clamscan</code> strings Extracts printable strings from binary files <code>strings</code>"},{"location":"remnux/#benefits","title":"Benefits","text":"<ul> <li>Tools like Volatility 3, FLOSS, oledump, and olevba are preconfigured and ready to go</li> <li><code>tools.yaml</code> is auto-tailored to the REMnux environment</li> <li>You can still customize your tool entries, but defaults are optimized for REMnux paths and permissions</li> <li>Useful for education, triage labs, and portable analysis setups</li> </ul>"},{"location":"remnux/#customizing-the-remnux-experience","title":"Customizing the REMnux Experience","text":"<p>Although REMnux Mode provides sane defaults, you can still:</p> <ul> <li>Override tool entries in <code>tools.yaml</code></li> <li>Add new third-party tools via the GUI or YAML</li> <li>Use the Configuration Panel to backup/restore your configuration</li> </ul> <p>For more information about REMnux, visit REMnux.org.</p>"},{"location":"support/","title":"Support","text":""},{"location":"support/#support-contribution","title":"Support &amp; Contribution","text":"<p>The MalChela project is open source and actively maintained. Contributions, feedback, and bug reports are always welcome. You can find the project on GitHub, where issues and pull requests are encouraged.</p>"},{"location":"support/#known-limitations-platform-notes","title":"Known Limitations &amp; Platform Notes","text":"<p>MalChela is designed to be cross-platform but has some current limitations:</p> <ul> <li>The CLI runs well on macOS, Linux, and WSL environments.</li> <li>The GUI is supported on macOS and Linux. It may also work under WSLg on Windows 11, but this is not officially tested.</li> <li>File paths must use POSIX-style formatting (e.g., <code>/home/user/file.txt</code>). Windows-style paths are not supported.</li> <li>If the <code>exec_type</code> field is missing or misconfigured in <code>tools.yaml</code>, GUI execution may fail or behave incorrectly.</li> <li>The <code>category</code> field in <code>tools.yaml</code> no longer impacts GUI execution behavior\u2014it is only used for grouping in the interface.</li> </ul>"},{"location":"support/#ios-26-development-panic","title":"iOS 26 Development Panic","text":"<p>If you're running iOS 26 beta and encounter a runtime panic like the following:</p> <pre><code>thread 'main' panicked at /Users/you/.cargo/registry/src/index.crates.io-*/icrate-0.0.4/.../NSEnumerator.rs:6:1: invalid message send ...\n</code></pre> <p>This is due to stricter signature checks in the Apple SDK when running in debug mode. The panic does not occur in release mode builds.</p> <p>To avoid the crash, build and run in release mode:</p> <pre><code>cargo build --release\n./target/release/MalChelaGUI\n</code></pre> <p>This issue does not affect normal usage or distribution of the application. Debug mode remains usable for building, but the GUI should be run from a release build on affected platforms.</p>"},{"location":"configuration/api-configuration/","title":"API Configuration","text":"<p>Some tools within MalChela rely on external services. In order to use these integrations, you must configure your API credentials.</p>"},{"location":"configuration/api-configuration/#tools-that-use-api-keys","title":"Tools That Use API Keys","text":"Tool Service Purpose <code>malhash</code> VirusTotal Hash lookup and enrichment <code>malhash</code> MalwareBazaar Hash lookup and sample classification <code>fileanalyzer</code> VirusTotal Hash lookup"},{"location":"configuration/api-configuration/#where-to-configure","title":"Where to Configure","text":"<p>MalChela uses two plain text files to store API keys for its third-party integrations:</p> <pre><code>vt-api.txt\nmb-api.txt\n</code></pre> <p>These files should be placed in the root of your MalChela workspace, alongside <code>tools.yaml</code>. Each file should contain a single line with your API key.</p> <p>These keys will be read at runtime by tools such as <code>malhash</code> to enable external lookups.</p> <p></p> <p>Figure 4: API Configuration Utility</p>"},{"location":"configuration/api-configuration/#managing-your-keys-with-the-configuration-utility","title":"Managing Your Keys with the Configuration Utility","text":"<p>The MalChela GUI includes a built-in Configuration Panel that lets you easily Create or update API key files without opening a text editor.</p> <p>Look for the API Key Management section in the Configuration Panel. Changes take effect immediately and persist across sessions.</p>"},{"location":"configuration/api-configuration/#best-practices","title":"Best Practices","text":"<ul> <li>Keep these files private. Do not commit them to Git or share them publicly.</li> </ul> <p>If a tool requires an API key but none is found, it will log a warning and skip external requests.</p>"},{"location":"configuration/tools-yaml/","title":"tools.yaml","text":"<p>MalChela uses a central <code>tools.yaml</code> file to define which tools appear in the GUI, along with their launch method, input types, categories, and optional arguments. This YAML-driven approach allows full control without editing source code.</p>"},{"location":"configuration/tools-yaml/#key-fields-in-each-tool-entry","title":"Key Fields in Each Tool Entry","text":"Field Purpose name Internal and display name of the tool description Shown in GUI for clarity command How the tool is launched (binary path or interpreter) exec_type One of <code>cargo</code>, <code>binary</code>, or <code>script</code> input_type One of <code>file</code>, <code>folder</code>, or <code>hash</code> file_position Controls argument ordering optional_args Additional CLI arguments passed to the tool category Grouping used in the GUI left panel <p>\u26a0\ufe0f All fields except <code>optional_args</code> are required.</p>"},{"location":"configuration/tools-yaml/#swapping-configs-remnux-mode-and-beyond","title":"Swapping Configs: REMnux Mode and Beyond","text":"<p>MalChela supports easy switching between tool configurations via the GUI.</p> <p></p> <p>Figure 3: YAML Config Tool \u2013 Tool entry shown in table and form</p> <p>To switch:</p> <ul> <li>Open the Configuration Panel</li> <li>Use \u201cSelect tools.yaml\u201d to point to a different config</li> <li>Restart the GUI or reload tools</li> </ul> <p>This allows forensic VMs like REMnux to use a tailored toolset while keeping your default config untouched.</p> <p>A bundled <code>tools_remnux.yaml</code> is included in the repo for convenience.</p>"},{"location":"configuration/tools-yaml/#key-tips","title":"Key Tips","text":"<ul> <li>Always use <code>file_position: \u201clast\u201d</code> unless the tool expects input before the script</li> <li>For scripts requiring Python, keep the script path in <code>optional_args[0]</code></li> <li>For tools installed via <code>pipx</code>, reference the binary path directly in <code>command</code></li> </ul>"},{"location":"configuration/tools-yaml/#backing-up-and-restoring-toolyaml","title":"Backing Up and Restoring tool.yaml","text":"<p>The MalChela GUI provides built-in functionality to back up and restore your <code>tools.yaml</code> configuration file.</p>"},{"location":"configuration/tools-yaml/#backup","title":"Backup","text":"<p>To create a backup of your current <code>tools.yaml</code>:</p> <ul> <li>Open the Configuration Panel</li> <li>Click the \u201cBack Up Config\u201d button</li> <li>A timestamped copy of <code>tools.yaml</code> will be saved to the default location</li> </ul> <p>You\u2019ll see a confirmation message when the operation completes successfully.</p>"},{"location":"configuration/tools-yaml/#restore","title":"Restore","text":"<p>To restore from a previous backup:</p> <ul> <li>Click the \u201cRestore Config\u201d button in the Configuration Panel</li> <li>Select a previously saved backup file</li> <li>The selected file will overwrite the current configuration</li> </ul> <p>This feature makes it easy to experiment with custom tool setups while retaining a safety net for recovery.</p>"},{"location":"coretools/","title":"Overview","text":"<p>Figure 9: MalChela GUI</p> <p></p> <p>Figure 10: MalChela CLI</p> MalChela Core Tools <p>   These built-in programs provide fast, flexible functionality for forensics and malware triage. </p> Program Function Combine YARAPoint it at a directory of YARA files and it will output one combined rule Extract SamplesPoint it at a directory of password protected malware files to extract all File AnalyzerGet the hash, entropy, packing, PE info, YARA and VT match status for a file File MinerScans a folder for file type mismatches and metadata, and provides suggested tools Hash CheckCheck a hash against a .txt or .tsv lookup table Hash ItPoint it to a file and get the MD5, SHA1 and SHA256 hash mStringsAnalyzes files with Sigma rules (YAML), extracts strings, matches ReGex MZHashRecurse a directory, for files with MZ header, create hash list and lookup table MZcountRecurse a directory, uses YARA to count MZ, Zip, PDF, other NSRL QueryQuery a MD5 or SHA1 hash against NSRL Strings to YARAPrompts for metadata and strings (text file) to create a YARA rule Malware Hash LookupQuery a hash value against VirusTotal &amp; Malware Bazaar* XMZHashRecurse a directory, for files without MZ, Zip or PDF header, create hash list and lookup table <p> *The Malware Hash Lookup requires an API key for VirusTotal and Malware Bazaar. If unidentified, MalChela will prompt you to create them the first time you run the malware lookup function. </p>"},{"location":"coretools/combine_yara/","title":"CombineYARA","text":"<p>Combine YARA merges multiple YARA rule files into a single consolidated rule set. It recursively scans a folder for .yar or .yara files and combines them into one output file. Ideal for organizing or deploying rule collections.</p> <p></p> <p>Figure 11: Combine YARA</p>"},{"location":"coretools/combine_yara/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code>cargo run -p combine_yara /path_to_yara_rules/\n</code></pre> <p>If no path is provided, the tool will prompt you to enter the directory interactively.</p> <pre><code>Enter the directory path to scan for YARA rules:\n</code></pre>"},{"location":"coretools/extract_samples/","title":"ExtractSamples","text":"<p>Extract Samples recursively unpacks password-protected archives commonly used in malware sharing (e.g., .zip, .rar, .7z). It uses default malware research passwords like infected and malware to extract samples in bulk for analysis.</p> <p></p> <p>Figure 12: Extract Samples</p>"},{"location":"coretools/extract_samples/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code># Example 1: No case name\ncargo run -p extract_samples /path_to_directory/ infected\n</code></pre> <p>In this mode, extracted files will be placed in the same location as each archive found.</p> <pre><code># Example 2: With case name\ncargo run -p extract_samples /path_to_directory/ infected --case Case123\n</code></pre> <p>When <code>--case</code> is provided, all extracted files will be saved under:</p> <pre><code>/saved_output/cases/Case123/extract_samples/\n</code></pre> <p>If no path or password is provided, the tool will prompt for them interactively.</p>"},{"location":"coretools/fileanalyzer/","title":"FileAnalyzer","text":"<p>FileAnalyzer performs deep static analysis on a single file. It extracts hashes, entropy, file type metadata, YARA rule matches, NSRL validation, and \u2014 for PE files \u2014 rich header details including import/export tables, compile timestamp, and section flags. Ideal for triaging unknown executables or confirming known file traits.</p> <p></p> <p>Figure 13: File Analyzer</p> <ul> <li>YARA rules for <code>fileanalyzer</code> are stored in the <code>yara_rules</code> folder in the workspace. You can modify or add rules here.</li> </ul>"},{"location":"coretools/fileanalyzer/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code># Example 1: No case name\ncargo run -p fileanalyzer -- /path_to_file/ -o -t\n\n# Example 2: With case name\ncargo run -p fileanalyzer -- /path_to_file/ -o -t --case Case123\n</code></pre> <p>When <code>--case</code> is provided, output will be saved under:</p> <pre><code>/saved_output/cases/Case123/fileanalyzer/\n</code></pre> <p>If <code>--case</code> is not specified, files will be saved in the default <code>saved_output/fileanalyzer/</code> folder.</p>"},{"location":"coretools/fileminer/","title":"FileMiner","text":"<p>Note: <code>FileMiner</code> replaces the deprecated <code>MismatchMiner</code>.</p> <p>FileMiner is a command-line tool that recursively scans a directory to analyze files by magic bytes and hash, identifying mismatches between file extensions and true types. It is useful for forensic triage, anomaly detection, and preparing follow-up analysis using other tools in the MalChela suite.</p> <p></p> <p>Figure 14: File Miner</p> <p></p> <p>Figure 15: File Miner with Subtool Output</p>"},{"location":"coretools/fileminer/#function-overview","title":"Function Overview","text":"<ul> <li>Identifies file types using magic byte detection (<code>infer</code>)</li> <li>Computes SHA-256 hashes for all files</li> <li>Detects extension mismatches</li> <li>Suggests relevant analysis tools (e.g., FileAnalyzer, mStrings, malhash)</li> <li>Outputs results in a styled table or optional JSON format</li> <li>Integrates with case management via the <code>--case</code> flag</li> <li>Automatically launches in GUI when a folder-based case is created or restored</li> <li>Results populate an interactive table in the GUI</li> <li>Users can launch suggested tools on a per-file basis directly from the GUI</li> </ul>"},{"location":"coretools/fileminer/#cli-usage","title":"CLI Usage","text":"<pre><code>cargo run -p fileminer -- [OPTIONS] [DIR]\n</code></pre>"},{"location":"coretools/fileminer/#options","title":"Options","text":"Option Description <code>DIR</code> Directory to analyze. Optional \u2014 will prompt if not supplied. <code>--json</code> Save results to JSON. Defaults to <code>fileminer_output.json</code> unless <code>--output</code> is used. <code>--output &lt;filename&gt;</code> Overrides the default output file name. Used internally by the GUI. <code>--case &lt;case-name&gt;</code> Saves output under <code>saved_output/&lt;case-name&gt;/fileminer/</code>. Also passes case name to downstream tools. <code>-m</code>, <code>--mismatches-only</code> Only display entries with extension mismatches."},{"location":"coretools/fileminer/#examples","title":"Examples","text":"<pre><code># Analyze interactively\ncargo run -p fileminer --\n\n# Analyze directory and save JSON\ncargo run -p fileminer -- /path/to/files --json\n\n# Save to specific case folder\ncargo run -p fileminer -- /path/to/files --case case123\n\n# Filter mismatches only\ncargo run -p fileminer -- /path/to/files -m\n\n# Combine all\ncargo run -p fileminer -- /path/to/files --case suspicious_usb -m\n</code></pre>"},{"location":"coretools/fileminer/#gui-usage-notes","title":"GUI Usage Notes","text":"<ul> <li>When a new case is created or restored using a folder, FileMiner runs automatically in the GUI.</li> <li>Results are saved under <code>saved_output/cases/&lt;case-name&gt;/fileminer/</code>.</li> <li>FileMiner displays an interactive table of results with suggested tools per file.</li> <li>Suggested tools can be launched directly from within the GUI results panel.</li> </ul>"},{"location":"coretools/hashcheck/","title":"HashCheck","text":"<p>HashCheck lets you quickly verify whether a given set of files (or hash values) match any entry in one or more known-good or known-bad hash lists. It\u2019s designed to help analysts triage large collections of files by comparing against reference datasets \u2014 for example, malware repositories, NSRL exports, or your own curated lists.</p> <p>Hash lists should be in <code>.tsv</code> format (tab-separated values) for best compatibility, though <code>.txt</code> files are also accepted.</p> <p></p> <p>Figure 16: Hash Check</p> <p>You can generate .tsv lookup files using MZHash or XMZHash.</p> <p>HashCheck supports MD5, SHA1, and SHA256 formats.</p>"},{"location":"coretools/hashcheck/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code># Example 1: Basic usage\ncargo run -p hashcheck ./hashes.tsv 44d88612fea8a8f36de82e1278abb02f\n\n# Example 2: Save output as .txt\ncargo run -p hashcheck ./hashes.tsv 44d88612fea8a8f36de82e1278abb02f -- -o -t\n\n# Example 3: Save output to case folder\ncargo run -p hashcheck ./hashes.tsv 44d88612fea8a8f36de82e1278abb02f -- -o -t --case CaseName\n</code></pre> <p>HashCheck accepts a hash and a lookup file (TSV or TXT). If not provided, you\u2019ll be prompted interactively.</p> <p>When <code>--case</code> is used, output will be saved under:</p> <pre><code>saved_output/cases/CaseName/hashcheck/\n</code></pre> <p>Without <code>--case</code>, reports are saved to the default:</p> <pre><code>saved_output/hashcheck/\n</code></pre>"},{"location":"coretools/hashit/","title":"HashIt","text":"<p><code>hashit</code> is a flexible hashing utility that supports calculating multiple hash types for one or more files. It can be used to verify file integrity, generate forensic reports, or build hash sets for analysis. Output can be saved in text, JSON, or Markdown format, and optionally redirected into a case folder.</p> <p></p> <p>Figure 17: Hash It</p> <p>The tool supports batch operations on directories and automatically recurses through subfolders. It's especially useful during triage to generate hash inventories or validate file integrity against known datasets.</p>"},{"location":"coretools/hashit/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code># Example 1: Show hash values only\ncargo run -p hashit -- /path_to_file/\n\n# Example 2: Save as .txt\ncargo run -p hashit -- /path_to_file/ -o -t\n\n# Example 3: Save to case folder\ncargo run -p hashit -- /path_to_file/ -o -t --case CaseName\n</code></pre> <p>Use <code>-o</code> to save output and include one of the following format flags: - <code>-t</code> \u2192 Save as <code>.txt</code> - <code>-j</code> \u2192 Save as <code>.json</code> - <code>-m</code> \u2192 Save as <code>.md</code></p> <p>If no file is provided, the tool will prompt you to enter the path interactively.</p> <p>When <code>--case</code> is used, output will be saved under:</p> <pre><code>saved_output/cases/CaseName/hashit/\n</code></pre> <p>Otherwise, reports are saved to:</p> <pre><code>saved_output/hashit/\n</code></pre>"},{"location":"coretools/malhash/","title":"MalHash","text":"<p>MalHash queries malware intelligence sources using a provided hash. It checks VirusTotal and MalwareBazaar for file metadata, threat labels, antivirus detections, and known associations. A quick way to enrich an unknown sample or confirm if a hash is already known and classified in the wild.</p> <p></p> <p>Figure 18: Malware Hash Lookup</p> <p>The first time you run MalHash, you\u2019ll be prompted to configure API keys for VirusTotal and MalwareBazaar if they\u2019re not already set.</p>"},{"location":"coretools/malhash/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code># Example 1: Lookup only\ncargo run -p malhash -- d41d8cd98f00b204e9800998ecf8427e\n\n# Example 2: Save output as .txt\ncargo run -p malhash -- d41d8cd98f00b204e9800998ecf8427e -o -t\n\n# Example 3: Save output to a case folder\ncargo run -p malhash -- d41d8cd98f00b204e9800998ecf8427e -o -t --case Case123\n</code></pre> <p>Use <code>-o</code> to save output and include one of the following format flags: - <code>-t</code> \u2192 Save as <code>.txt</code> - <code>-j</code> \u2192 Save as <code>.json</code> - <code>-m</code> \u2192 Save as <code>.md</code></p> <p>If no hash is provided, the tool will prompt you to enter it interactively.</p> <p>When <code>--case</code> is used, output is saved to:</p> <pre><code>saved_output/cases/Case123/malhash/\n</code></pre> <p>Otherwise, reports are saved to:</p> <pre><code>saved_output/malhash/\n</code></pre>"},{"location":"coretools/mstrings/","title":"MStrings","text":"<p>mStrings extracts strings from files and classifies them using regular expressions, YARA rules, and MITRE ATT&amp;CK mappings. It highlights potential indicators of compromise and suspicious behavior, grouping matches by tactic and technique. Ideal for quickly surfacing malicious capabilities in binaries, scripts, and documents.</p> <p></p> <p>Figure 19: MStrings</p>"},{"location":"coretools/mstrings/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code># Example 1: Scan a file\ncargo run -p mstrings -- /path_to_file/\n\n# Example 2: Save output as .txt\ncargo run -p mstrings -- /path_to_file/ -o -t\n\n# Example 3: Save output to a case folder\ncargo run -p mstrings -- /path_to_file/ -o -t --case CaseXYZ\n</code></pre> <p>Use <code>-o</code> to save output and include one of the following format flags: - <code>-t</code> \u2192 Save as <code>.txt</code> - <code>-j</code> \u2192 Save as <code>.json</code> - <code>-m</code> \u2192 Save as <code>.md</code></p> <p>If no file is provided, the tool will prompt you to enter the path interactively.</p> <p>When <code>--case</code> is used, output is saved to:</p> <pre><code>saved_output/cases/CaseXYZ/mstrings/\n</code></pre> <p>Otherwise, results are saved to:</p> <pre><code>saved_output/mstrings/\n</code></pre>"},{"location":"coretools/mzcount/","title":"MZCount","text":"<p>MZcount recursively scans a directory and counts the number of files that match key signatures like MZ (Windows executables), ZIP, PDF, and others. It uses lightweight YARA rules to classify files by type, giving a quick overview of the content breakdown within a dataset. Results can be displayed in either a detailed per-file view or a clean summary table, depending on your analysis needs.</p> <p></p> <p>Figure 20: MZCount Table View</p> <p></p> <p>Figure 21: MZCount Detail View</p>"},{"location":"coretools/mzcount/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code># Example 1: Scan a directory and view results in terminal\ncargo run -p mzcount -- /path_to_scan/\n\n# Example 2: Enable table mode\nMZCOUNT_TABLE_DISPLAY=1 cargo run -p mzcount -- /path_to_scan/\n\n# Example 3: Save results as .txt\ncargo run -p mzcount -- /path_to_scan/ -- -o -t\n\n# Example 4: Save results to a case folder\ncargo run -p mzcount -- /path_to_scan/ -- -o -t --case CaseName\n</code></pre> <p>If no path is provided, the tool will prompt you to enter it interactively.</p> <p>Use <code>-o</code> to save output and <code>-t</code> to specify plain text format.</p> <p>When <code>--case</code> is used, output is saved under:</p> <pre><code>saved_output/cases/CaseName/mzcount/\n</code></pre> <p>Otherwise, output is saved under:</p> <pre><code>saved_output/mzcount/\n</code></pre>"},{"location":"coretools/mzhash/","title":"MZHash","text":"<p>Note: <code>MZHash</code> replaces the deprecated <code>MZMd5</code>.</p> <p><code>MZHash</code> recursively scans a folder and generates hashes for all files that begin with the MZ header \u2014 the signature of Windows PE executables. It\u2019s useful for building known-good or known-bad hash sets during triage, reverse engineering, or threat hunting.</p> <p>You can select one or more hash algorithms at runtime: MD5, SHA1, or SHA256. If multiple algorithms are selected, a hash file and TSV lookup table will be generated for each.</p> <p>The program outputs: - A text file with one hash per line. - A TSV (tab-separated values) file with full file paths and their corresponding hashes.</p> <p>By default, hashes are saved to <code>saved_output/mzhash/</code>. If the file already exists, the user will be prompted before overwriting.</p> <p>These hash sets (.tsv preferred) can be used with HashCheck.</p> <p></p> <p>Figure 22: MZHash</p>"},{"location":"coretools/mzhash/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code># Example 1: Generate default SHA256 hashes\ncargo run -p mzhash -- /path_to_directory/\n\n# Example 2: Generate all three hash types (MD5, SHA1, SHA256)\ncargo run -p mzhash -- /path_to_directory/ -a MD5 -a SHA1 -a SHA256\n\n# Example 3: Generate SHA1 and SHA256 only\ncargo run -p mzhash -- /path_to_directory/ -a SHA1 -a SHA256\n\n# Example 4: Save output to a case folder\ncargo run -p mzhash -- /path_to_directory/ -a SHA256 --case CaseName\n</code></pre> <p>If <code>--case</code> is specified, output will be saved to:</p> <pre><code>saved_output/cases/CaseName/mzhash/\n</code></pre> <p>Otherwise, hashes are saved to:</p> <pre><code>saved_output/mzhash/\n</code></pre> <p>You can combine multiple <code>-a</code> flags in any order.</p>"},{"location":"coretools/nsrlquery/","title":"NSRLQuery","text":"<p>NSRL Query checks a file hash against the National Software Reference Library (NSRL) by querying the CIRCL hash lookup service. It helps identify known, trusted software \u2014 allowing analysts to filter out benign files and focus on unknown or suspicious ones during forensic triage.</p> <p></p> <p>Figure 23: NSRL Hash Lookup</p>"},{"location":"coretools/nsrlquery/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code>cargo run -p nsrlquery -- -o -t d41d8cd98f00b204e9800998ecf8427e\n</code></pre> <p>Performs a lookup using the CIRCL hashlookup API and saves the result as a <code>.txt</code> file.</p> <p>Use <code>-o</code> to save output and include one of the following format flags: - <code>-t</code> \u2192 Save as <code>.txt</code> - <code>-j</code> \u2192 Save as <code>.json</code> - <code>-m</code> \u2192 Save as <code>.md</code></p> <p>If no hash is provided, the tool will prompt you to enter one interactively:</p> <pre><code>Enter the hash value:\n</code></pre> <p>Only MD5 and SHA1 hashes are supported. If an unsupported hash length is entered:</p> <pre><code>Error: Unsupported hash length. Please enter a valid MD5 (32 chars) or SHA1 (40 chars) hash.\n</code></pre> <p>To associate output with a case folder:</p> <pre><code>cargo run -p nsrlquery -- -o -j --case APT2025 d41d8cd98f00b204e9800998ecf8427e\n</code></pre> <p>This saves the <code>.json</code> output in <code>saved_output/cases/APT2025/nsrlquery/</code>.</p>"},{"location":"coretools/strings_to_yara/","title":"StringsToYARA","text":"<p>Strings to YARA helps you rapidly build custom YARA rules by prompting for a rule name, optional metadata, and a list of string indicators. It integrates with the MalChela scratchpad, allowing you to paste or collect candidate strings interactively.</p> <p>Lines beginning with hash: are deliberately ignored during rule generation \u2014 this lets you use the scratchpad to track hashes alongside strings without polluting your YARA rule content.</p> <p></p> <p>Figure 24: Strings to YARA</p>"},{"location":"coretools/strings_to_yara/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code>cargo run -p strings_to_yara -- RuleName Author Description Hash /path/to/strings.txt --case CaseName\n</code></pre> <p>You can supply up to five positional arguments. If any are omitted, the tool will prompt you interactively.</p> <pre><code>Enter rule name:\nEnter author:\nEnter description:\nEnter hash (optional):\nEnter path to string list file:\n</code></pre> <p>If the <code>--case</code> flag is supplied, the resulting YARA rule will be saved in the corresponding <code>saved_output/cases/CaseName/</code> directory.</p> <p>Lines in the string file that begin with <code>hash:</code> are ignored and will not be included in the generated rule.</p>"},{"location":"coretools/usage/","title":"Usage","text":""},{"location":"coretools/usage/#getting-started","title":"Getting Started","text":"<p>Before runnning MalChela for the first time, you need to build the release binaries. There is a script provided in the workspace root.</p>"},{"location":"coretools/usage/#building-the-releases","title":"Building the Releases","text":"<pre><code>chmod +x release.sh\n./release.sh\n</code></pre>"},{"location":"coretools/usage/#execution","title":"Execution","text":"<p>MalChela supports three main workflows:</p>"},{"location":"coretools/usage/#direct-tool-execution-cli","title":"Direct Tool Execution (CLI)","text":"<pre><code>./target/release/toolname [input] [flags]\n</code></pre>"},{"location":"coretools/usage/#malchela-cli-launcher-menu","title":"MalChela CLI Launcher Menu","text":"<pre><code>./target/release/malchela\n</code></pre>"},{"location":"coretools/usage/#malchela-gui-launcher","title":"MalChela GUI Launcher","text":"<pre><code>./target/release/MalChelaGUI\n</code></pre>"},{"location":"coretools/usage/#cli-usage-notes","title":"CLI Usage Notes","text":"<ul> <li>Tools that accept paths (files or folders) should be run from the <code>target/release</code> directory after building with <code>release.sh</code>:   <code>bash   ./target/release/fileanalyzer /path/to/file -o</code></li> </ul> <p>Most tools now support a <code>--case &lt;name&gt;</code> argument to redirect saved output to a specific case folder under <code>saved_output/cases/</code>. Cases must be initiated with either a file or folder as the input. Hash-only workflows can be added to an existing case but cannot start one.</p> <p>Note: Some tools (e.g., <code>mstrings</code>, <code>fileanalyzer</code>, <code>malhash</code>) require the <code>-o</code> flag to trigger output saving\u2014even when <code>--case</code> is specified. Others (like <code>strings_to_yara</code> or <code>mzcount</code>) save automatically when a case is provided. Refer to the Tool Behavior Reference below for details.</p>"},{"location":"coretools/usage/#output-formats","title":"Output Formats","text":"<p>All tools that support saving reports use the following scheme: <code>saved_output/&lt;tool&gt;/report_&lt;timestamp&gt;.&lt;ext&gt;</code></p> <p>To save output, use:</p> <pre><code>-o -t   # text\n-o -j   # json\n-o -m   # markdown\n</code></pre> <ul> <li><code>-o</code> enables saving (CLI output is not saved by default)</li> </ul> <p>If a <code>--case</code> argument is supplied, the report will be saved to: <code>saved_output/cases/&lt;case_name&gt;/&lt;tool&gt;/report_&lt;timestamp&gt;.&lt;ext&gt;</code></p> <p>Example:</p> <pre><code>cargo run -p mstrings \u2014 path/to/file \u2014 -o -j\n</code></pre> <ul> <li>If <code>-o</code> is used without a format (<code>-t</code>, <code>-j</code>, or <code>-m</code>), an error will be shown</li> </ul>"},{"location":"coretools/usage/#gui-usage-notes","title":"GUI Usage Notes","text":""},{"location":"coretools/usage/#gui-features-summary","title":"GUI Features Summary","text":"<ul> <li>Categorized tool list with input type detection (file, folder, hash)</li> <li>Arguments textbox and dynamic path browser</li> <li>Console output with ANSI coloring</li> <li>Save Report checkbox toggles <code>-o</code> flag</li> <li>Status bar displays CLI-equivalent command</li> <li>Alphabetical sorting of tools within categories</li> <li>Tool descriptions are now shown alongside tool names</li> <li> <p>Saved reports are cleaned of internal formatting tags like [green], [reset], etc.</p> </li> <li> <p>Cases must be created from a file or folder. Hashes can be used later but do not initiate new cases.</p> </li> </ul>"},{"location":"coretools/usage/#gui-walkthrough","title":"GUI Walkthrough","text":"<p>Layout</p> <ul> <li>Top Bar: Title and status</li> <li>Left Panel: Tool categories and selections</li> <li>Center Panel: Dynamic tool input options</li> <li>Bottom Panel: Console output</li> </ul> <p>Running Tools</p> <ul> <li>Select a tool</li> <li>Fill in input fields</li> <li>Configure options (save report, format, etc.)</li> <li>Click Run</li> </ul> <p>Save Report</p> <ul> <li>Formats: <ul> <li>.txt     Analyst-readable summary</li> <li>.json    Machine-parsable, structured output</li> <li>.md      Shareable in tickets, wikis, etc. .txt, .json, .md</li> <li>Location: saved_output//report_. (only one file is generated per run)"},{"location":"coretools/usage/#scratchpad","title":"Scratchpad","text":"<ul> <li>An integrated notepad for recording strings, indicators or notes</li> <li>Supports saving as text, markdown and YAML formats</li> <li>Integrated \u201cOpen in VS Code\u201d button for saved notes</li> <li>Any line starting with <code>hash:</code> is ignored when using the Scratchpad as a source for String_to_Yara to generate YARA rules</li> </ul>"},{"location":"coretools/usage/#tool-behavior-reference","title":"Tool Behavior Reference","text":"Tool Input Type Supports <code>-o</code> Prompts if Missing Notes combine_yara folder \u274c \u2705 Combines multiple YARA rules extract_samples file \u274c \u2705 Extracts archive contents fileanalyzer file \u2705 \u2705 Uses YARA + heuristics hashit file \u2705 \u2705 Generates hashes hashcheck hash and lookup file \u274c \u2705 Checks files against known hashes malhash hash \u2705 \u2705 Uses vt-cli + bazaar-cli fileminer folder \u2705 \u2705 Identifies mismatches mstrings file \u2705 \u2705 Maps strings to MITRE mzhash folder \u2705 \u2705 Hashes files with MZ header nsrlquery file \u2705 \u2705 Queries CIRCL strings_to_yara text file and metadata Case Only \u2705 Saves to case folder if <code>--case</code> is provided mzcount folder \u274c \u2705 Will save to case folder if <code>--case</code> is provided xmzhash folder \u2705 \u2705 Hashes files without known headers"},{"location":"coretools/xmzhash/","title":"XMZHash","text":"<p>Note: <code>XMZHash</code> replaces the deprecated <code>XMZMd5</code>.</p> <p><code>XMZHash</code> recursively scans a directory and generates hashes for all files that do not match common binary or archive signatures such as MZ, ZIP, or PDF. It\u2019s ideal for uncovering unusual or misclassified files that may require deeper inspection or reverse engineering. Use this on a malware corpus to help surface non-Windows malware samples.</p> <p>You can select one or more hash algorithms at runtime: MD5, SHA1, or SHA256. If multiple algorithms are selected, a hash file and TSV lookup table will be generated for each.</p> <p>The program outputs: - A text file with one hash per line. - A TSV (tab-separated values) file with full file paths and their corresponding hashes.</p> <p>By default, hashes are saved to <code>saved_output/mzhash/</code>. If the file already exists, the user will be prompted before overwriting.</p> <p>These hash sets (.tsv preferred) can be used with HashCheck.</p> <p></p> <p>Figure 25: XMZHash</p>"},{"location":"coretools/xmzhash/#cli-syntax","title":"\ud83d\udd27 CLI Syntax","text":"<pre><code>cargo run -p xmzhash -- /path_to_directory/\n</code></pre> <p>Generates SHA256 hashes (default).</p> <pre><code>cargo run -p xmzhash -- -a MD5 -a SHA1 -a SHA256 /path_to_directory/\n</code></pre> <p>Generates all three hash types.</p> <pre><code>cargo run -p xmzhash -- -a SHA1 -a SHA256 /path_to_directory/\n</code></pre> <p>Generates SHA1 and SHA256 only.</p> <pre><code>cargo run -p xmzhash -- -a SHA256 /path_to_directory/ --case MyCase\n</code></pre> <p>Saves results to the specified case folder.</p> <p>You can combine multiple <code>-a</code> flags in any order. If no directory is passed, you will be prompted.</p>"},{"location":"tools/","title":"Integrating Third-Party Tools","text":"<p>MalChela supports the integration of external tools such as Python-based utilities (<code>oletools</code>, <code>oledump</code>) and high-performance YARA engines (<code>yara-x</code>). These tools expand MalChela\u2019s capabilities beyond its native Rust-based toolset.</p> <p>Tools now require <code>exec_type</code> (e.g., <code>cargo</code>, <code>binary</code>, <code>script</code>) to define how they are launched, and <code>file_position</code> to clarify argument order when needed.</p> <p>To integrate a new tool into the GUI, ensure the tool: - Accepts CLI arguments in the form <code>toolname [args] [input]</code> - Outputs results to stdout - Is installed and available in <code>$PATH</code></p> <pre><code>- name: toolname\n  description: \u201cShort summary of tool purpose\u201d\n  command: [\u201ctoolname\u201d]\n  input_type: file  # or folder or hash\n  category: \u201cFile Analysis\u201d  # or other GUI category\n  optional_args: []\n  exec_type: binary  # or cargo / script\n  file_position: last  # or first, if required\n</code></pre> <p>You can switch to a prebuilt <code>tools.yaml</code> for REMnux mode via the GUI configuration panel \u2014 useful for quick setup in forensic VMs.</p>"},{"location":"tools/enhanced/","title":"Enhanced Integrations","text":"<p>Enhanced configurations have been preconfigured for several third-party tools such as TShark and Volatility, enabling streamlined integration with MalChela. These tools now support saving output directly into the active Case folder when launched from the GUI, preserving structured reports and maintaining context across sessions.</p> <p>Additionally, dedicated setup instructions are provided for Python-based tools like oledump and olevba, as well as installation guidance for utilities like YARA-X to ensure consistent and reliable operation across environments.</p>"},{"location":"tools/pcap_to_csv/","title":"PCAP to CSV Conversion","text":"<p>The <code>tshark_to_csv.py</code> script is a helper utility that converts <code>.pcap</code> or <code>.pcapng</code> files into structured <code>.csv</code> files using <code>tshark</code>. This allows packet captures to be processed and analyzed using familiar spreadsheet or database tools.</p> <p></p> <p>Figure 28: PCAP to CSV</p> <p>The script uses <code>tshark</code> to extract key fields from each packet and writes them to a CSV file with headers. Users can specify custom fields, or rely on a default set commonly useful for forensic review.</p> <p>Timestamps in the CSV output are converted into a human-readable ISO 8601 format with microsecond precision (<code>YYYY-MM-DDTHH:MM:SS.ssssssZ</code>), ensuring compatibility with downstream tools such as the Magnet Custom Artifact Generator.</p> <p>This script is included in the MalChela repository under <code>Utilities/</code>, and is referenced in <code>tools.yaml</code> but commented out by default. Uncomment the entry in <code>tools.yaml</code> to enable it in the GUI.</p> <p>Requirements:</p> <ul> <li>Python 3</li> <li>Wireshark/tshark (must be installed and available in PATH)</li> </ul>"},{"location":"tools/python/","title":"Python Integrations","text":""},{"location":"tools/python/#configuring-python-based-tools-oletools-oledump","title":"Configuring Python-Based Tools (oletools &amp; oledump)","text":"<p>MalChela supports Python-based tools as long as they are properly declared in <code>tools.yaml</code>. Below are detailed examples and installation instructions for two commonly used utilities:</p>"},{"location":"tools/python/#olevba-from-oletools","title":"\ud83d\udd27 <code>olevba</code> (from <code>oletools</code>)","text":"<p>Install via <code>pipx</code>:</p> <pre><code>pipx install oletools\n</code></pre> <p>This installs <code>olevba</code> as a standalone CLI tool accessible in your user path.</p> <p><code>tools.yaml</code> configuration example:</p> <pre><code>- name: olevba\n  description: \u201cOLE document macro utility\u201d\n  command: [\u201c/Users/youruser/.local/bin/olevba\u201d]\n  input_type: \u201cfile\u201d\n  file_position: \u201clast\u201d\n  category: \u201cOffice Document Analysis\u201d\n  optional_args: []\n  exec_type: script\n</code></pre> <p>Notes:</p> <ul> <li><code>olevba</code> is run directly (thanks to pipx)</li> <li>No need to specify a Python interpreter in <code>command</code></li> <li>Ensure the path to <code>olevba</code> is correct and executable</li> </ul> <p>\u2014</p>"},{"location":"tools/python/#oledump-standalone-script","title":"<code>oledump</code> (standalone script)","text":"<p>Manual installation:</p> <pre><code>mkdir -p ~/Tools/oledump\ncd ~/Tools/oledump\ncurl -O https://raw.githubusercontent.com/DidierStevens/DidierStevensSuite/master/oledump.py\nchmod +x oledump.py\n</code></pre> <p>Make sure the script path in <code>optional_args</code> is absolute, and that the file is executable if it\u2019s run directly (not through a Python interpreter in <code>command</code>).</p> <p>Dependencies:</p> <pre><code>python3 -m pip install olefile\n</code></pre> <p>Alternatively, create a virtual environment to isolate dependencies:</p> <pre><code>python3 -m venv ~/venvs/oledump-env\nsource ~/venvs/oledump-env/bin/activate\npip install olefile\n</code></pre> <p><code>tools.yaml</code> configuration example:</p> <pre><code>- name: oledump\n  description: \u201cOLE Document Dump Utility\u201d\n  command: [\u201c/usr/local/bin/python3\u201d]\n  input_type: \u201cfile\u201d\n  file_position: \u201clast\u201d\n  category: \u201cOffice Document Analysis\u201d\n  optional_args: [\u201c/Users/youruser/Tools/oledump/oledump.py\u201d]\n  exec_type: script\n</code></pre> <p>Notes:</p> <ul> <li>The GUI ensures correct argument order: <code>python oledump.py &lt;input_file&gt;</code></li> <li><code>command</code> points to the Python interpreter</li> <li><code>optional_args</code> contains the path to the script</li> </ul>"},{"location":"tools/tools-yaml/","title":"Configuration Reference","text":""},{"location":"tools/tools-yaml/#tool-configuration","title":"Tool Configuration","text":"<p>MalChela uses a central <code>tools.yaml</code> file to define which tools appear in the GUI, along with their launch method, input types, categories, and optional arguments. This YAML-driven approach allows full control without editing source code.</p>"},{"location":"tools/tools-yaml/#key-fields-in-each-tool-entry","title":"Key Fields in Each Tool Entry","text":"Field Purpose name Internal and display name of the tool description Shown in GUI for clarity command How the tool is launched (binary path or interpreter) exec_type One of <code>cargo</code>, <code>binary</code>, or <code>script</code> input_type One of <code>file</code>, <code>folder</code>, or <code>hash</code> file_position Controls argument ordering optional_args Additional CLI arguments passed to the tool category Grouping used in the GUI left panel <p>\u26a0\ufe0f All fields except <code>optional_args</code> are required.</p>"},{"location":"tools/tools-yaml/#swapping-configs-remnux-mode-and-beyond","title":"Swapping Configs: REMnux Mode and Beyond","text":"<p>MalChela supports easy switching between tool configurations via the GUI.</p> <p></p> <p>Figure 26: YAML Config Tool</p> <p>To switch:</p> <ul> <li>Open the Configuration Panel</li> <li>Use \u201cSelect tools.yaml\u201d to point to a different config</li> <li>Restart the GUI or reload tools</li> </ul> <p>This allows forensic VMs like REMnux to use a tailored toolset while keeping your default config untouched.</p> <p>A bundled <code>tools_remnux.yaml</code> is included in the repo for convenience.</p>"},{"location":"tools/tools-yaml/#key-tips","title":"Key Tips","text":"<ul> <li>Always use <code>file_position: \u201clast\u201d</code> unless the tool expects input before the script</li> <li>For scripts requiring Python, keep the script path in <code>optional_args[0]</code></li> <li>For tools installed via <code>pipx</code>, reference the binary path directly in <code>command</code></li> </ul>"},{"location":"tools/tools-yaml/#backing-up-and-restoring-toolyaml","title":"Backing Up and Restoring tool.yaml","text":"<p>The MalChela GUI provides built-in functionality to back up and restore your <code>tools.yaml</code> configuration file.</p>"},{"location":"tools/tools-yaml/#backup","title":"Backup","text":"<p>To create a backup of your current <code>tools.yaml</code>:</p> <ul> <li>Open the Configuration Panel</li> <li>Click the \u201cBack Up Config\u201d button</li> <li>A timestamped copy of <code>tools.yaml</code> will be saved to the default location</li> </ul> <p>You\u2019ll see a confirmation message when the operation completes successfully.</p>"},{"location":"tools/tools-yaml/#restore","title":"Restore","text":"<p>To restore from a previous backup:</p> <ul> <li>Click the \u201cRestore Config\u201d button in the Configuration Panel</li> <li>Select a previously saved backup file</li> <li>The selected file will overwrite the current configuration</li> </ul> <p>This feature makes it easy to experiment with custom tool setups while retaining a safety net for recovery.</p>"},{"location":"tools/tshark/","title":"TShark","text":""},{"location":"tools/tshark/#tshark-field-reference-panel","title":"TShark Field Reference Panel","text":"<p>If TShark is included in your <code>tools.yaml</code> (or if you\u2019re using the REMnux configuration), the GUI offers a powerful set of tools to assist with display filter creation and usage. This includes both an integrated filter builder and a TShark Field Reference panel.</p> <ul> <li>The filter builder allows users to construct and modify complex TShark display filters directly within the GUI, with real-time syntax support and validation.</li> <li>The \u201c?\u201d icon next to filter fields launches the Field Reference panel, which provides searchable field definitions, examples, tooltips, and a copy-to-clipboard feature.</li> <li>Together, these tools help analysts visually explore and test filter syntax without needing to memorize protocol-specific field names.</li> <li>Output can be saved to the default location or to a specific case directory.</li> </ul> <p></p> <p>Figure 27: TShark</p>"},{"location":"tools/vol3/","title":"Volatility 3","text":"<p>MalChela integrates support for Volatility 3, a powerful memory forensics framework. This tool enables analysts to examine memory dumps for signs of compromise, persistence mechanisms, and malicious activity.</p>"},{"location":"tools/vol3/#integration-overview","title":"Integration Overview","text":"<p>Volatility 3 is available in MalChela as an enhanced third-party tool. The GUI provides a dedicated interface for selecting plugins, supplying arguments, and reviewing results \u2014 all within a structured panel that mimics the CLI workflow but adds quality-of-life improvements like:</p> <ul> <li>Live search and categorized plugin reference</li> <li>Plugin-specific argument helpers</li> <li>Color-coded output for easier review</li> <li>Output saving and file dump options</li> <li>Output can be saved to the default location or to a specific case directory.</li> </ul> <p></p> <p>Figure 29: Volatility (launches in separate terminal)</p> <p></p> <p>Figure 30: Volatility Plugin Reference</p>"},{"location":"tools/vol3/#requirements","title":"Requirements","text":"<p>To use Volatility 3 within MalChela:</p> <ul> <li>You must have <code>vol3</code> (Volatility 3 CLI) installed and accessible in your system <code>$PATH</code>.</li> <li>On REMnux, <code>vol3</code> is preinstalled and configured automatically.</li> <li>On macOS or Linux, you can install it via pip:   <code>pip install volatility3</code></li> </ul>"},{"location":"tools/vol3/#toolsyaml-configuration","title":"tools.yaml Configuration","text":"<p>To use Volatility 3 with the GUI launcher, ensure the correct <code>command</code> value is defined in your <code>tools.yaml</code> configuration. Depending on your environment, the binary may be installed under different names or locations.</p> <p>Two common examples:</p> <pre><code>- name: Volatility 3\n  description: \"Memory analysis using Volatility 3\"\n  command: [\"/Users/dmetz/.local/bin/vol3\"]\n  input_type: \"file\"\n  file_position: \"first\"\n  category: \"Memory Forensics\"\n  gui_mode_args: []\n  exec_type: binary\n\n- name: Volatility 3\n  description: \"Memory analysis using Volatility 3\"\n  command: [\"vol3\"]\n  input_type: \"file\"\n  file_position: \"first\"\n  category: \"Memory Forensics\"\n  gui_mode_args: []\n  exec_type: script\n</code></pre> <p>Make sure that the specified binary path or command is accessible in your system\u2019s <code>$PATH</code>.</p>"},{"location":"tools/vol3/#example-use-cases","title":"Example Use Cases","text":"<ul> <li>Enumerate processes: <code>windows.pslist</code></li> <li>Dump suspicious files from memory: <code>windows.dumpfiles --dump-dir /output/path</code></li> <li>Detect injected code: <code>windows.malfind</code></li> <li>YARA scanning on memory: <code>windows.vadyarascan --yara-file rules.yar</code></li> </ul>"},{"location":"tools/vol3/#output-and-reports","title":"Output and Reports","text":"<p>All plugin results are streamed to the GUI console with formatting preserved. Where supported, plugins that produce dumped files will output to a user-specified folder.</p>"},{"location":"tools/vol3/#known-limitations","title":"Known Limitations","text":"<ul> <li>Some plugins require symbol files (<code>.pdb</code>) to function correctly. Volatility will display a warning if missing.</li> <li>Ensure sufficient system memory when analyzing large memory dumps.</li> </ul>"},{"location":"tools/vol3/#additional-resources","title":"Additional Resources","text":"<ul> <li>Volatility 3 GitHub</li> <li>Official Documentation</li> </ul>"},{"location":"tools/yara-x/","title":"Installing and Configuring YARA-X","text":"<p>Figure 31: YARA-X </p> <p>YARA-X is an extended version of YARA with enhanced performance and features. To integrate YARA-X with MalChela, follow these steps:</p>"},{"location":"tools/yara-x/#installation","title":"Installation","text":"<ul> <li> <p>Download the latest release:    Visit the official YARA-X GitHub releases page at https://github.com/VirusTotal/yara-x/releases and download the appropriate binary for your platform.</p> </li> <li> <p>Extract and install:    Extract the downloaded archive and place the <code>yara-x</code> binary (<code>yr</code>) in a directory included in your system\u2019s <code>$PATH</code>, or note its absolute path for configuration.</p> </li> <li> <p>Verify installation:    Run the following command to confirm YARA-X is installed correctly:</p> </li> </ul> <pre><code>yr \u2014version\n</code></pre>"},{"location":"tools/yara-x/#configuration-in-malchela","title":"Configuration in MalChela","text":"<p>To use YARA-X within MalChela tools, update your <code>tools.yaml</code> with the following example entry:</p> <pre><code>- name: yara-x\n  description: \u201cHigh-performance YARA-X engine\u201d\n  command: [\u201cyara-x\u201d]\n  input_type: \u201cfile\u201d\n  file_position: \u201clast\u201d\n  category: \u201cFile Analysis\u201d\n  optional_args: []\n  exec_type: binary\n</code></pre>"},{"location":"tools/yara-x/#using-yara-x-rules","title":"Using YARA-X Rules","text":"<ul> <li>Place your YARA rules in the <code>yara_rules</code> folder within the workspace.</li> <li>YARA-X supports recursive includes and extended features; ensure your rules are compatible.</li> <li>The MalChela GUI and CLI will invoke YARA-X when configured as above, providing faster scans and improved detection.</li> </ul>"},{"location":"tools/yara-x/#tips","title":"Tips","text":"<ul> <li>For advanced usage, consult the YARA-X documentation for command-line options and rule syntax.</li> </ul>"}]}